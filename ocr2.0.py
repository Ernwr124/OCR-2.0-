# app.py
import os
import re
import json
import requests
import traceback
from datetime import datetime
from typing import Dict, Any, List, Optional
import uuid
import threading
import time
import random

from pdf2image import convert_from_path
from PIL import Image, ImageEnhance
import numpy as np
import cv2
import pytesseract
from flask import Flask, request, jsonify, send_file, render_template_string

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
UPLOAD_FOLDER = 'uploads'
OUTPUT_FOLDER = 'outputs'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

dpi = 300
use_preprocessing = True
OLLAMA_MODEL = "gemma2:2b-instruct-q4_K_M"
OLLAMA_API_URL = "http://localhost:11434/api/chat"

REQUIRED_FIELDS = [
    "document_type", "contract_number", "sign_date", "expiry_date",
    "seller", "buyer", "amount", "currency",
    "validation_status", "extraction_accuracy"
]

# –°—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
PROCESSING_MESSAGES = [
    "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ò–ò-–º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...",
    "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...",
    "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞...",
    "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OCR...",
    "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...",
    "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π...",
    "–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...",
    "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON...",
    "–ü–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞...",
    "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏..."
]
# ------------------

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['OUTPUT_FOLDER'] = OUTPUT_FOLDER

# --- OCR –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–≤–∞—à –∫–æ–¥) ---
def robust_preprocess_image(image: Image.Image) -> Image.Image:
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ OCR."""
    if image.mode != 'L':
        image = image.convert('L')

    if use_preprocessing:
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.5)
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(3.0)

        img_array = np.array(image)

        coords = np.column_stack(np.where(img_array < 200))
        if len(coords) > 0:
            angle = cv2.minAreaRect(coords)[-1]
            if angle < -45: angle = -(90 + angle)
            else: angle = -angle
            if abs(angle) > 1:
                (h, w) = img_array.shape[:2]
                center = (w // 2, h // 2)
                M = cv2.getRotationMatrix2D(center, angle, 1.0)
                img_array = cv2.warpAffine(img_array, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)

        img_array = cv2.adaptiveThreshold(img_array, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 15, 10)
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))
        img_array = cv2.morphologyEx(img_array, cv2.MORPH_CLOSE, kernel, iterations=1)

        image = Image.fromarray(img_array)

    return image


def extract_text_with_tesseract(image: Image.Image) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract OCR."""
    try:
        text = pytesseract.image_to_string(image, lang='rus+eng+kaz')
        return text.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Tesseract OCR: {e}")
        return ""


def call_gemma_model(extracted_text: str, page_num: int) -> Dict[str, Any]:
    """
    üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ô –¢–ï–ö–°–¢ –≤ gemma2 ‚Äî –æ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –µ–≥–æ –≤ JSON.
    """
    prompt = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–∞. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, **–∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏** –∏ –≤–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û JSON-–æ–±—ä–µ–∫—Ç. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –ø—Ä–µ–ª—é–¥–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON. "
        "–í JSON-–æ–±—ä–µ–∫—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–∏: 'contract_number', 'sign_date', 'expiry_date', 'seller', 'buyer', 'amount', 'currency'. "
        "–î–ª—è –ø–æ–ª–µ–π 'seller' –∏ 'buyer', –∏—â–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä—è–¥–æ–º —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ '–ü—Ä–æ–¥–∞–≤–µ—Ü'/'Seller' –∏ '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'/'Buyer'. "
        "–ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ—Å—Ç–∞–≤—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω—ã–º null. "
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ä—É—Å—Å–∫–∏–π, –∫–∞–∑–∞—Ö—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –ü—Ä–∏–º–µ—Ä: "
        "{\"contract_number\": \"199\", \"sign_date\": \"05.03.24\", \"expiry_date\": \"31.12.23\", "
        "\"seller\": \"–¢–û–û Strong Miners\", \"buyer\": \"–û–û–û –°—Ç—Ä–æ–π–ø—Ä–æ–º–ø–æ–∑–∏—Ü–∏—è-–°—Ç—Ä–æ–π\", "
        "\"amount\": \"182 179 993.91\", \"currency\": \"RUB\"}\n\n"
        f"–¢–µ–∫—Å—Ç:\n{extracted_text}"
    )

    payload = {
        "model": OLLAMA_MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "stream": False,
        "options": {"temperature": 0.0}
    }

    try:
        print(f"  ‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num} –≤ Gemma2...")
        response = requests.post(OLLAMA_API_URL, json=payload, timeout=120)
        response.raise_for_status()
        result = response.json()
        raw_content = result["message"]["content"].strip()
        
        try:
            json_match = re.search(r'\{.*\}', raw_content, re.DOTALL)
            if json_match:
                json_string = json_match.group(0)
                data = json.loads(json_string)
                print(f"  ‚Üê –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}.")
                return data
            else:
                print(f"  ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ JSON-–æ–±—ä–µ–∫—Ç.")
                return {}
        except json.JSONDecodeError:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON.")
            return {}
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemma2 –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {e}")
        return {}


def validate_date(date_str: Optional[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π."""
    if not date_str:
        return False
    # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –Ω–∞–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–æ–≤
    for fmt in ["%d.%m.%Y", "%d/%m/%Y", "%Y-%m-%d", "%d.%m.%y", "%d.%m.%Y –≥."]:
        try:
            datetime.strptime(date_str, fmt.replace('–≥.', '')).date()
            return True
        except ValueError:
            continue
    return False


def validate_amount(amount_str: Optional[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º–æ–π."""
    if not amount_str:
        return False
    cleaned = amount_str.replace(" ", "").replace(",", ".")
    try:
        float(cleaned)
        return True
    except ValueError:
        return False


def clean_text(text: Optional[str]) -> Optional[str]:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤."""
    if not text:
        return None
    cleaned = re.sub(r'[\n\t\r]', ' ', str(text)).strip()
    return cleaned if cleaned else None


def extract_structured_data(model_results: List[Dict[str, Any]], all_pages_text: str, filename: str) -> Dict[str, Any]:
    """
    –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –∏—Å–ø–æ–ª—å–∑—É—è LLM –∏ regex, –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏.
    """
    final_data = {
        "document_type": "contract",
        "file_name": filename,
        "contract_number": None,
        "sign_date": None,
        "expiry_date": None,
        "seller": None,
        "buyer": None,
        "amount": None,
        "currency": None,
        "validation_status": "partial",
        "extraction_accuracy": 0.0,
        "metrics": {
            "CER": 0.0,
            "WER": 0.0,
            "Levenshtein": 0.0,
            "field_level_accuracy": 0.0,
            "exact_match": 0.0,
            "json_validity": 0.0,
            "schema_consistency": 0.0,
        }
    }

    found_fields_count = 0
    valid_json_count = 0

    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é LLM (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    for result in model_results:
        if isinstance(result, dict) and 'raw_text' not in result:
            valid_json_count += 1
            for key in ["contract_number", "sign_date", "expiry_date", "seller", "buyer", "amount", "currency"]:
                if final_data[key] is None and key in result and result[key] is not None:
                    cleaned_value = clean_text(result[key])
                    if cleaned_value and len(cleaned_value) > 2:
                        final_data[key] = cleaned_value

    # 2. –î–æ–ø–æ–ª–Ω—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    # –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ LLM —á–∞—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∏–ª–∏ –ø—É—Ç–∞–µ—Ç
    
    # –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
    if not final_data["contract_number"]:
        contract_number_match = re.search(r'(?:‚Ññ|No)\s*([-\w\/]+)', all_pages_text, re.IGNORECASE)
        if contract_number_match:
            final_data["contract_number"] = contract_number_match.group(1).strip()

    # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è (–∏—â–µ–º —Ç–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY)
    if not final_data["sign_date"]:
        sign_date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})', all_pages_text)
        if sign_date_match:
            final_data["sign_date"] = sign_date_match.group(1)

    # –ü–æ–∏—Å–∫ —Å—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    if not final_data["amount"] or not final_data["currency"]:
        # –ò—â–µ–º –≤–∞–ª—é—Ç—É, –∞ –∑–∞—Ç–µ–º —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –Ω–µ–π
        amount_currency_match = re.search(r'(USD|RUB|EUR|KZT)\s*([\d\s,\.]+)', all_pages_text, re.IGNORECASE)
        if amount_currency_match:
            final_data["currency"] = amount_currency_match.group(1).upper()
            final_data["amount"] = clean_text(amount_currency_match.group(2))
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    for key in ["sign_date", "expiry_date"]:
        if final_data[key] and not validate_date(final_data[key]):
            final_data[key] = None

    for key in ["amount"]:
        if final_data[key] and not validate_amount(final_data[key]):
            final_data[key] = None

    # üìä –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (—Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
    total_fields = 7
    found_fields = sum(1 for key in ["contract_number", "sign_date", "expiry_date", "seller", "buyer", "amount", "currency"] if final_data.get(key) is not None)
    
    final_data["extraction_accuracy"] = round(found_fields / total_fields, 2)
    final_data["validation_status"] = "valid" if found_fields == total_fields else "partial"
    final_data["metrics"]["field_level_accuracy"] = final_data["extraction_accuracy"]
    final_data["metrics"]["exact_match"] = 1.0 if found_fields == total_fields else 0.0
    final_data["metrics"]["json_validity"] = valid_json_count / len(model_results) if len(model_results) > 0 else 0.0
    final_data["metrics"]["schema_consistency"] = final_data["metrics"]["json_validity"]

    return final_data


def save_structured_data(data: Dict[str, Any], output_file: str):
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4, sort_keys=True)
        print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ '{output_file}'")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

# --- Flask routes ---
@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
    if file:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
        unique_filename = str(uuid.uuid4()) + os.path.splitext(file.filename)[1]
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
        file.save(file_path)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ JSON
        output_json_filename = str(uuid.uuid4()) + '.json'
        output_json_path = os.path.join(app.config['OUTPUT_FOLDER'], output_json_filename)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
        thread = threading.Thread(target=process_pdf, args=(file_path, output_json_path, unique_filename, output_json_filename))
        thread.start()
        
        return jsonify({'task_id': unique_filename, 'output_json_filename': output_json_filename}), 202

def process_pdf(file_path: str, output_json_path: str, unique_filename: str, output_json_filename: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        status_data_path = os.path.join(app.config['OUTPUT_FOLDER'], f"{unique_filename}_status.json")
        with open(status_data_path, 'w') as f:
            json.dump({'status': 'processing', 'message': PROCESSING_MESSAGES[0], 'progress': 5}, f)

        print(f"üìÇ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ PDF '{file_path}' –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        with open(status_data_path, 'w') as f:
            json.dump({'status': 'processing', 'message': PROCESSING_MESSAGES[1], 'progress': 10}, f)
        pages = convert_from_path(file_path, dpi=dpi)
        print(f"üñºÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü.")
        with open(status_data_path, 'w') as f:
            json.dump({'status': 'processing', 'message': PROCESSING_MESSAGES[2], 'progress': 15}, f)

        model_results = []
        full_extracted_text = ""
        filename = os.path.basename(file_path)

        for i, page in enumerate(pages):
            print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i+1}...")
            with open(status_data_path, 'w') as f:
                json.dump({'status': 'processing', 'message': f"{PROCESSING_MESSAGES[3]} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}/{len(pages)})", 'progress': 15 + (i / len(pages)) * 30}, f)
            processed_page = robust_preprocess_image(page) if use_preprocessing else page
            page_text = extract_text_with_tesseract(processed_page)
            full_extracted_text += f"\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} ---\n{page_text}"
            
            with open(status_data_path, 'w') as f:
                json.dump({'status': 'processing', 'message': f"{PROCESSING_MESSAGES[4]} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}/{len(pages)})", 'progress': 45 + (i / len(pages)) * 15}, f)
            page_result = call_gemma_model(page_text, i+1)
            model_results.append(page_result)
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            time.sleep(random.uniform(0.5, 1.5))

        print("\nüîç --- –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–• ---")
        with open(status_data_path, 'w') as f:
            json.dump({'status': 'processing', 'message': PROCESSING_MESSAGES[5], 'progress': 65}, f)
        structured_data = extract_structured_data(model_results, full_extracted_text, filename)
        
        print("üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for key, value in structured_data.items():
            if key not in ["metrics", "raw_text_snippet"]:
                print(f"  {key}: {value}")

        print(f"‚úÖ Schema Consistency: {structured_data['metrics']['schema_consistency'] * 100:.1f}%")
        print("--- –ö–û–ù–ï–¶ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• ---\n")
        
        with open(status_data_path, 'w') as f:
            json.dump({'status': 'processing', 'message': PROCESSING_MESSAGES[6], 'progress': 75}, f)
        time.sleep(1) # –ò–º–∏—Ç–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        with open(status_data_path, 'w') as f:
            json.dump({'status': 'processing', 'message': PROCESSING_MESSAGES[7], 'progress': 85}, f)
        time.sleep(1) # –ò–º–∏—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è JSON
        
        with open(status_data_path, 'w') as f:
            json.dump({'status': 'processing', 'message': PROCESSING_MESSAGES[8], 'progress': 95}, f)
        save_structured_data(structured_data, output_json_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
        result_data_path = os.path.join(app.config['OUTPUT_FOLDER'], f"{unique_filename}_result.json")
        with open(result_data_path, 'w') as f:
             json.dump(structured_data, f)
             
        with open(status_data_path, 'w') as f:
            json.dump({'status': 'processing', 'message': PROCESSING_MESSAGES[9], 'progress': 100}, f)
        time.sleep(0.5) # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        traceback.print_exc()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
        error_data_path = os.path.join(app.config['OUTPUT_FOLDER'], f"{unique_filename}_error.json")
        with open(error_data_path, 'w') as f:
            json.dump({'error': str(e)}, f)

@app.route('/status/<task_id>')
def get_status(task_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞
    result_data_path = os.path.join(app.config['OUTPUT_FOLDER'], f"{task_id}_result.json")
    error_data_path = os.path.join(app.config['OUTPUT_FOLDER'], f"{task_id}_error.json")
    status_data_path = os.path.join(app.config['OUTPUT_FOLDER'], f"{task_id}_status.json")
    
    if os.path.exists(result_data_path):
        with open(result_data_path, 'r') as f:
            data = json.load(f)
        return jsonify({'status': 'completed', 'data': data})
    elif os.path.exists(error_data_path):
         with open(error_data_path, 'r') as f:
            data = json.load(f)
         return jsonify({'status': 'error', 'data': data})
    elif os.path.exists(status_data_path):
        with open(status_data_path, 'r') as f:
            data = json.load(f)
        return jsonify(data)
    else:
        return jsonify({'status': 'unknown'})

@app.route('/download/<filename>')
def download_file(filename):
    return send_file(os.path.join(app.config['OUTPUT_FOLDER'], filename), as_attachment=True)

# --- HTML, CSS, JS Template ---
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OCR 2.0 –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        :root {
            --primary-color: #4361ee;
            --primary-dark: #3a56d4;
            --secondary-color: #7209b7;
            --success-color: #06d6a0;
            --danger-color: #ef476f;
            --warning-color: #ffd166;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --gray-color: #6c757d;
            --border-radius: 12px;
            --box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #e4edf5 100%);
            color: var(--dark-color);
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        header {
            text-align: center;
            margin-bottom: 40px;
            animation: fadeInDown 0.8s ease-out;
        }

        header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        header p {
            font-size: 1.1rem;
            color: var(--gray-color);
        }

        /* Upload Section */
        .upload-section {
            background: white;
            border-radius: var(--border-radius);
            padding: 40px;
            text-align: center;
            box-shadow: var(--box-shadow);
            margin-bottom: 40px;
            animation: fadeInUp 0.8s ease-out;
            transition: var(--transition);
        }

        .drop-area {
            border: 2px dashed var(--primary-color);
            border-radius: var(--border-radius);
            padding: 60px 20px;
            cursor: pointer;
            transition: var(--transition);
            background-color: rgba(67, 97, 238, 0.03);
        }

        .drop-area:hover, .drop-area.dragover {
            background-color: rgba(67, 97, 238, 0.1);
            transform: translateY(-5px);
        }

        .drop-area p {
            margin-bottom: 20px;
            font-size: 1.1rem;
            color: var(--gray-color);
        }

        .btn {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3);
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(67, 97, 238, 0.4);
        }

        .btn:active {
            transform: translateY(-1px);
        }

        .btn:disabled {
            background: var(--gray-color);
            cursor: not-allowed;
            box-shadow: none;
            transform: none;
        }

        .btn-secondary {
            background: var(--gray-color);
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
        }

        .btn-secondary:hover {
            background: #5a6268;
            box-shadow: 0 6px 20px rgba(108, 117, 125, 0.4);
        }

        .btn-primary {
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            font-size: 1.1rem;
            padding: 15px 30px;
            margin-top: 20px;
            box-shadow: 0 6px 20px rgba(67, 97, 238, 0.4);
        }

        .btn-primary:hover {
            box-shadow: 0 8px 25px rgba(67, 97, 238, 0.5);
        }

        .btn-download {
            background: var(--success-color);
            box-shadow: 0 6px 20px rgba(6, 214, 160, 0.4);
        }

        .btn-download:hover {
            background: #05c191;
            box-shadow: 0 8px 25px rgba(6, 214, 160, 0.5);
        }

        .file-info {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 15px;
            margin-top: 20px;
            padding: 15px;
            background-color: #e8f4ff;
            border-radius: var(--border-radius);
            animation: fadeIn 0.5s ease-out;
        }

        /* Progress Section */
        .progress-section {
            background: white;
            border-radius: var(--border-radius);
            padding: 40px;
            text-align: center;
            box-shadow: var(--box-shadow);
            margin-bottom: 40px;
            animation: fadeIn 0.5s ease-out;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(67, 97, 238, 0.2);
            border-top: 5px solid var(--primary-color);
            border-radius: 50%;
            margin: 0 auto 20px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .progress-bar {
            width: 100%;
            height: 10px;
            background-color: #e9ecef;
            border-radius: 5px;
            overflow: hidden;
            margin-top: 20px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            width: 0%;
            transition: width 0.5s ease;
            border-radius: 5px;
        }

        .progress-message {
            margin-top: 15px;
            font-weight: 500;
            color: var(--primary-color);
            min-height: 1.5em;
        }

        /* Result Section */
        .result-section {
            animation: fadeIn 0.8s ease-out;
        }

        .result-section h2 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2rem;
            color: var(--primary-color);
        }

        .result-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }

        .card {
            background: white;
            border-radius: var(--border-radius);
            padding: 30px;
            box-shadow: var(--box-shadow);
            transition: var(--transition);
        }

        .card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

        .card h3 {
            margin-bottom: 20px;
            color: var(--secondary-color);
            font-size: 1.4rem;
        }

        .card ul {
            list-style: none;
        }

        .card li {
            padding: 12px 0;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
        }

        .card li:last-child {
            border-bottom: none;
        }

        .card li strong {
            font-weight: 600;
            color: var(--dark-color);
        }

        .download-section {
            text-align: center;
        }

        /* Error Section */
        .error-section {
            background: white;
            border-radius: var(--border-radius);
            padding: 40px;
            text-align: center;
            box-shadow: var(--box-shadow);
            animation: fadeIn 0.8s ease-out;
            border-left: 5px solid var(--danger-color);
        }

        .error-section h2 {
            color: var(--danger-color);
            margin-bottom: 20px;
        }

        .error-section p {
            font-size: 1.1rem;
            color: var(--gray-color);
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive */
        @media (max-width: 768px) {
            body {
                padding: 15px;
            }
            
            header h1 {
                font-size: 2rem;
            }
            
            .upload-section, .progress-section, .card {
                padding: 25px;
            }
            
            .result-cards {
                grid-template-columns: 1fr;
            }
            
            .drop-area {
                padding: 40px 15px;
            }
            
            .file-info {
                flex-direction: column;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>OCR 2.0 –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h1>
            <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
        </header>

        <main>
            <section class="upload-section">
                <div class="drop-area" id="dropArea">
                    <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ PDF-—Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏</p>
                    <button class="btn" id="browseBtn">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</button>
                    <input type="file" id="fileElem" accept=".pdf" hidden>
                </div>
                <div class="file-info" id="fileInfo" style="display: none;">
                    <span id="fileName"></span>
                    <button class="btn btn-secondary" id="removeFileBtn">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
                <button class="btn btn-primary" id="uploadBtn" disabled>–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</button>
            </section>

            <section class="progress-section" id="progressSection" style="display: none;">
                <div class="spinner"></div>
                <p class="progress-message" id="progressMessage">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ò–ò-–º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...</p>
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
            </section>

            <section class="result-section" id="resultSection" style="display: none;">
                <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏</h2>
                <div class="result-cards">
                    <div class="card">
                        <h3>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                        <ul id="generalInfo">
                            <!-- –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è JS -->
                        </ul>
                    </div>
                    <div class="card">
                        <h3>–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
                        <ul id="extractedData">
                            <!-- –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è JS -->
                        </ul>
                    </div>
                    <div class="card">
                        <h3>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞</h3>
                        <ul id="metrics">
                            <!-- –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è JS -->
                        </ul>
                    </div>
                </div>
                <div class="download-section">
                    <button class="btn btn-download" id="downloadBtn">–°–∫–∞—á–∞—Ç—å JSON</button>
                </div>
            </section>

            <section class="error-section" id="errorSection" style="display: none;">
                <h2>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</h2>
                <p id="errorMessage"></p>
            </section>
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const dropArea = document.getElementById('dropArea');
            const fileElem = document.getElementById('fileElem');
            const browseBtn = document.getElementById('browseBtn');
            const fileInfo = document.getElementById('fileInfo');
            const fileName = document.getElementById('fileName');
            const removeFileBtn = document.getElementById('removeFileBtn');
            const uploadBtn = document.getElementById('uploadBtn');
            const progressSection = document.getElementById('progressSection');
            const progressFill = document.getElementById('progressFill');
            const progressMessage = document.getElementById('progressMessage');
            const resultSection = document.getElementById('resultSection');
            const errorSection = document.getElementById('errorSection');
            const errorMessage = document.getElementById('errorMessage');
            const downloadBtn = document.getElementById('downloadBtn');
            const generalInfo = document.getElementById('generalInfo');
            const extractedData = document.getElementById('extractedData');
            const metrics = document.getElementById('metrics');

            let selectedFile = null;
            let outputJsonFilename = null;

            // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            browseBtn.addEventListener('click', () => {
                fileElem.click();
            });

            // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ input
            fileElem.addEventListener('change', (e) => {
                if (e.target.files.length) {
                    handleFileSelect(e.target.files[0]);
                }
            });

            // Drag and Drop —Å–æ–±—ã—Ç–∏—è
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, unhighlight, false);
            });

            function highlight() {
                dropArea.classList.add('dragover');
            }

            function unhighlight() {
                dropArea.classList.remove('dragover');
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            dropArea.addEventListener('drop', (e) => {
                const dt = e.dataTransfer;
                const file = dt.files[0];
                if (file && file.type === 'application/pdf') {
                    handleFileSelect(file);
                } else {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª.');
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            function handleFileSelect(file) {
                if (file.type !== 'application/pdf') {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª.');
                    return;
                }
                selectedFile = file;
                fileName.textContent = file.name;
                fileInfo.style.display = 'flex';
                uploadBtn.disabled = false;
                // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                resultSection.style.display = 'none';
                errorSection.style.display = 'none';
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            removeFileBtn.addEventListener('click', () => {
                selectedFile = null;
                fileElem.value = '';
                fileInfo.style.display = 'none';
                uploadBtn.disabled = true;
            });

            // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            uploadBtn.addEventListener('click', async () => {
                if (!selectedFile) return;

                const formData = new FormData();
                formData.append('file', selectedFile);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progressSection.style.display = 'block';
                uploadBtn.disabled = true;
                dropArea.style.display = 'none';
                fileInfo.style.display = 'none';

                try {
                    const response = await fetch('/upload', {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        const data = await response.json();
                        outputJsonFilename = data.output_json_filename;
                        
                        // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
                        pollStatus(data.task_id);
                    } else {
                        const errorData = await response.json();
                        showError(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞:', error);
                    showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
                }
            });

            // –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            async function pollStatus(taskId) {
                const checkStatus = async () => {
                    try {
                        const response = await fetch(`/status/${taskId}`);
                        const data = await response.json();

                        if (data.status === 'completed') {
                            showResults(data.data);
                        } else if (data.status === 'error') {
                            showError(data.data.error);
                        } else if (data.status === 'processing') {
                            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            progressFill.style.width = `${data.progress || 0}%`;
                            progressMessage.textContent = data.message || '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
                            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å
                            setTimeout(checkStatus, 1000);
                        } else {
                            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å
                            setTimeout(checkStatus, 2000);
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
                        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                    }
                };

                // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
                checkStatus();
            }

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            function showResults(data) {
                progressSection.style.display = 'none';

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                generalInfo.innerHTML = '';
                const generalFields = ['document_type', 'file_name', 'validation_status'];
                generalFields.forEach(key => {
                    const li = document.createElement('li');
                    li.innerHTML = `<strong>${formatKey(key)}:</strong> <span>${data[key] || '‚Äî'}</span>`;
                    generalInfo.appendChild(li);
                });

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                extractedData.innerHTML = '';
                const dataFields = ['contract_number', 'sign_date', 'expiry_date', 'seller', 'buyer', 'amount', 'currency'];
                dataFields.forEach(key => {
                    const li = document.createElement('li');
                    li.innerHTML = `<strong>${formatKey(key)}:</strong> <span>${data[key] || '‚Äî'}</span>`;
                    extractedData.appendChild(li);
                });

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics.innerHTML = '';
                if (data.metrics) {
                    const metricFields = [
                        { key: 'field_level_accuracy', label: 'Field-level Accuracy' },
                        { key: 'exact_match', label: 'Exact Match' },
                        { key: 'json_validity', label: 'JSON Validity' },
                        { key: 'schema_consistency', label: 'Schema Consistency' }
                    ];
                    metricFields.forEach(item => {
                        const value = data.metrics[item.key];
                        const displayValue = typeof value === 'number' ? (value * 100).toFixed(1) + '%' : value;
                        const li = document.createElement('li');
                        li.innerHTML = `<strong>${item.label}:</strong> <span>${displayValue}</span>`;
                        metrics.appendChild(li);
                    });
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                resultSection.style.display = 'block';

                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                resultSection.scrollIntoView({ behavior: 'smooth' });
            }

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
            function showError(message) {
                progressSection.style.display = 'none';
                errorMessage.textContent = message;
                errorSection.style.display = 'block';
                uploadBtn.disabled = false;
                dropArea.style.display = 'block';
            }

            // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ JSON
            downloadBtn.addEventListener('click', () => {
                if (outputJsonFilename) {
                    window.location.href = `/download/${outputJsonFilename}`;
                }
            });

            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            function formatKey(key) {
                const keyMap = {
                    'document_type': '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                    'file_name': '–ò–º—è —Ñ–∞–π–ª–∞',
                    'contract_number': '–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞',
                    'sign_date': '–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è',
                    'expiry_date': '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
                    'seller': '–ü—Ä–æ–¥–∞–≤–µ—Ü',
                    'buyer': '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
                    'amount': '–°—É–º–º–∞',
                    'currency': '–í–∞–ª—é—Ç–∞',
                    'validation_status': '–°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                    'field_level_accuracy': '–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –ø–æ–ª—è–º',
                    'exact_match': '–ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ',
                    'json_validity': '–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON',
                    'schema_consistency': '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å—Ö–µ–º—ã'
                };
                return keyMap[key] || key;
            }
        });
    </script>
</body>
</html>
'''

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ OCR 2.0 –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Äî –ö–ï–ô–° 2")
    print("üéØ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Tesseract OCR + Gemma2 Instruct (gemma2:2b-instruct-q4_K_M) + JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    app.run(debug=True)